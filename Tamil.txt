



Day 1 (04/27/2023)
	* Explaining basics of Git and Eclipse
	* Created git account
	* Created a maven project
	* pushed local project into online 
	* added collaborator
	
	Git: 
		* Two or more people can work(edit) on same file or project at same time
		* Time saving
	
	Eclipse:
		* Easy and convenient to view and edit a file or project
		* We can view the project in easy structural order so that, we can view or edit it easily
		* Running a code also easy by simply clicking on a button
		* while writing itself, complilation of code would happen.
		
	Maven:
		* Dependency management tool
		* We dont need to download a dependency and update it in our project
		* By simply giving what dependency we want, Maven will download it and add it in our project
		* along with this feature, maven also gives us a proper structure to view in any editing tools such as Eclipse, intelliJ.
		* Maven dependencies are downloaded and stored in ".m2" folder in our system.
		* Each dependencies has 
			* Group Id (Meta)
			* Artifact Id (Facebook or Insta or Threads or Whatsapp) 
			* Version Number (Facebook 1.1, Insta 10.0.2, etc)
		* Dependencies can be managed in a maven project by pom.xml file
		
	* How to create a simple java project
	* How to add dependencies in the simple java project 
	* How to create a maven project 
	* How to add dependencies in a maven project
	
Day 2 (04/28/2023)
	* Importing a project from remote to local (Cloning)
	* General things about Java
		* everything in Java is Object (but there is a but) 
		* Object has structure and it does a specific work
	 
Real time 

Taluk Office

* Marriage certificate, Income certificate, death certificate, Caste certificate

Receptionist
Clerk
Broker

building - Taluk office

Reception: 
chairs
table
reception table 
people 
water
newspaper
pen
Reception phone
Rceptionist
Receptionst personal phone
documents
camera
system


Marriage certificate room: 
people
chairs
table
camera 
system 
newspapre
document
pen
water
Personal phone
common phone
marriage certificates

Income certificate room: 
people
chairs
table
camera 
system 
newspapre
document
pen
water
Personal phone
common phone
income certificates

Access Modifer
Personal things 
common things


each room is to do a specfic designated work. 
	each room is called Method.
	Method in java is to do a specific work
	Whatever work you do, it should be a method or inside a method
	Whatever happens inside a method is invisible to others
	You can take reception room water bottle to any methods room but you can not take methods room things to other places (there is a but)

Structure 
People - 50
chair - 100
table - 10

people, chair, table - data type 

People - 100 - chair 100 - data type and variable 
One person in that people name is Sathya - name 

Taluk office building 
	It is to do a set of work - marriage, income & other certificates
	Marriage certificate method, Income certificate method, etc. (each of them are methods)
	Class in java consist of many methods
	Taluk office - Class


People adminstration - package
Chennai Taluk office - Class 
	below are sub classes of Chennai Taluk office 
Velachery Taluk office - Class 
	Velachery east Taluk office - Class (He is sub class of Velachery class)
Tambaram Taluk office - Class
Guindy Taluk office - Class 

* Sub classes of Chennai are Velachery, Guindy and Tambaram
* Velachery east is sub class of Velachery 
* Velachery east is same package of Tambaram but not a sub class of Tambaram

Based on this only we created access modifier 


Police department adminstration - package
Chennai police station 
Tambaram police station 

Hospital administration - package 
chennai hospital (Govt and private) 
tambaram hospital 

Law management - package
Chennai court 
Tambaram court 

Chennai administration - project
	People adminstration - package
	Police department adminstration - package
	Hospital administration - package 
	Law management - package
	

* People adminstration have a set of rules
* Police department have set of rules
* Hopspital adminstration 
	private hospital rules set
	Govt hospital rules set 

These rules set in Java are called interface

Taluk office 
	Receptionist - Chennai Taluk office receptionist
	Reception Phone - Chennai taluk office phone 
	Reception table - Chennai taluk office reception table 
similarly for other classes too. 

They are always belongs to their specific class  - static 
	* Whenever we call a static member outside of class, we call them with their class name 
	* within a class, we call static member directly (no need to call as Chennai Taluk office Receptionist)

Velachery Govt hospital - class 
	* They are scheduling a health checkup camp 
		* In this case, they take doctors, nurses, medicines, operation room, cleaning room and other things from Velachery Govt hospital only

Health checkup camp - Object name 
Object we create for class only
When creating object, they take/create copy of all the things in that class

Tambaram police station wants health check up 
* In Tambaram police station's campus, we create object for Tambaram Govt hospital health check up camp 

Coming back to Taluk office 
clerk in taluk office, we take as constructor

* We just tell what you want 
* you tell what you want with document
* you tell what you want with document1, document2
* you tell what you want with documents, amount
* you tell what you want with amount

Project
	package1
		InterfaceA
		ClassA (Datatype/variables/methods)
			ClassAA 
			ClassAB
		ClassB
		ClassC
	package2
		ClassA
		ClassB
	package3
		ClassX
		ClassA
		

* Class - It does a set of work. It consist of variables and methods. Each work would be done by methods. 

* Methods - It does speicific job. It always written inside a class

* Variable - it can have type(Data type) and posses a number or name;
			variables can have different access - access Modifier
			
* Access Modifier - difines where we can use a variable/method/class

* Interface - It contains rules most of the time. Sometimes it does some work too(means method).
			Interface is always followed by class/classes. 
			When class follows interface, class should do the rule written in the interfacebject

* package - contains class/classes/interface/interfaces/file/files/folder/folders

* Project - consist of package/packages/file/files/folder/folders/source(src)folder

* static - static means belongs to the class. If govt hospital is class, then hospital receptionist is a static member of that class. 
We can not seperate them variables and methods can be static
			within a class - static can be used anywhere directly (in a static method or in non-static method)
			Outside calss - static can be used but alone with class name. (in a static method or in non-static method)

* Object (instatiation or initiation)  - E.g: Medical camp; 
			We create Object only for classes; Whenever we create object we copy whatever the class contains(except static)
			means, only non-static is copied
			Through object we can not call static things.

* Constructor - Object creation happens with the help of constructor
				constructor is available in different kind
				1. without any money/permission
				2. only with money
				3. only with permission
				4. with both money and permission
				
				
*******************************************************************
DAY 3(03/05/2023)

Class - important thing, through which we perform some task. Class may contains methods and variables

Method1 - A work
Method2 - B work
Method3 - C work ( A work + some other work = method1 + some other work)

redundant - repeatable 
reuse

Variables - shape and count/name
shape - datatype 

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Datatype: Its a classification of a data, which tells the compiler or interpretor about how the programmer intends to use the data.

1) Primitive
	a) boolean - yes or no OR true or false 
	b) Textual 
		char - a, b, c, A, B
		byte - 
			byte x = 10;
	c) numeric 
		int 
		short
		double
		long
		float

2) Non Primitive
	d) String 
	e) array

each datatype has a default value

* default value of String is null
* default value of int is 0
* boolean - false

How we declare variable
Syntax = accessModifier dataType variableName/variable = variableValue (non static)
Syntax = accessModifier static dataType variableName/variable = variableValue (static)

int a = 10;  
int a;
String a = "10";
String a;
String a = null; (null is a keyword here, it means String a has nothing.)
String a = "null"; ("null" is a String/word here.)
double a = 10d;
char sathya = 'A';
boolean Boolean = true;

int a; - declare
a = 10; - define/initiate

int a = 10;
int - data type( primitive --> numeric)
a - variable/variableName;
10 - value posses by the variable/ value pointed by the variable
If you want 10, you need to call 'a' only. 

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&


Variables - Its a memory location that can hold values of a specific datatype.

Types of variables 
1. Local variable - 
	* Datatype declared/initiated within a method/constructor, for, if    -- block ({...})
	* scope of local variable is only within the block in which the variable is declared
	* intialisation of local variable is madatory
	* local variables can not be static
	{
	int a = 10;
	char c;
	c = 20;
	String sathya = "10";
	static int b = 10; -- we can not create like this.
	}
	
2. Instance variable/class variable/non-static variable
	* Declared within a class but outside of a block ({...})
	* Non- static variables
	* To access instance variables, we need to create object
	
	classA {
	int a = 10; //class level non static variable
	String sathya = "10"; //class level non static variable
	
	method1() {
	int  a = 10; // local variable
	
	sysout(sathya); // we can not use a non static like this. we need to create object
	// it should be written as 
	ClassA obj = new ClassA(); //object creation
	sysout(obj.sathya);
	}
	}
	
	
3. static variable
	* Declared within a class but outside of a block
	* static keyword is used with variables and methods
	* To access this variable, dont need to create an object
	* within a class - static can be used anywhere directly (in a static method or in non-static method)
	* Outside class - static can be used but along with class name. (in a static method or in non-static method)
	
	static int a = 10;
	static String sathya = "10";
	
	ClassA (TalukOffice) {

static int a = 10;
//a = receptionist;

method1() {

print (a);


}

}


ClassB (Govt hospital) {

method2() {
print (ClassA.a);
//print (TalukOffice.receptionist)
}
	
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
	
Access Modifier
	* It defines where and who can use a method/variable/class
	1) default
	2) private
	3) protected
	4) public 
	
	Syntax = accessModifier dataType variableName/variable = variableValue
		   = static accessModifier dataType variableName/variable = variableValue 
	int a = 10; - default (no need to mention "default" word
	private int a = 10;
	protected int a = 10;
	public int a = 10;
	
	
	packageA
		classA ( int a = 10)
			ClassAA (same package and sub class of A)
		classB (same package but non sub class of A)
	packageX
		classX (diff package non sub class of ClassA)
		classXA (diff package but sub class of A)
		
	
How other ClassA and other Classes can use variable 'a' based on its access modifier.

                                     | default |  private  | protected  | public 
									 |         |           |            | 
classA ( int a = 10)                 | yes     | yes       | yes        | yes
									 |         |           |            |
same package but sub class           | yes     | no        | yes        | yes 
									 |         |           |            |
same package but non sub class       | yes     | no        | yes        | yes
									 |         |           |            |
different package but sub class      | no      | no        | yes        | yes
									 |         |           |            |
different package but non sub class  | no      | no        | no         | yes

ClassA {

int a = 10;
private int b = 100;
protected int c = 20;
public int d = 15

method1() {
print (a); - No compile time error
print (b);
print (c);
print (d); 
}

}

ClassAA following ClassA{

ClassA obj = new ClassA();
method1() {
print (obj.a); 
print (obj.b);
print (obj.c);
print (obj.d); 
}
}

ClassB {

ClassA obj = new ClassA();
method1() {
print (obj.a); 
print (obj.b);
print (obj.c);
print (obj.d); 
}
}

################################
JVM, JRE, JDK

our codes - english - .java
compile - .class - byte code (machine recognizable language). 
			it is available in target folder.


JVM - Java Virtual Machine 
* This can not be seen
* it starts the execution(creates Runtime Environment)
* It first checks for main method
* It creates the code flow, in java the flow is called "Thread" 
* JVM provides run time environment in which Java byte codes can be executed
* loads code| verifies code| execute code| provides run time environment

JRE - Java Runtime Environment
* Physically exist
* Contains JVM and set of libraries
* JVM uses these libraries to execute the codes

JDK - Java Developement kit
* It contains JVM, set of libraries and dev tools (JRE + dev tools)
* Used to develop and execute the codes
* Dev tools + debugger + compiler + java doc

**************************************************************************
DAY 4(04/05/2023)		
	
What is eclipse (IDE)

Its an editor to edit and view your project or project files
While writing itself, it will notify us about complilation errors

Its a user interface to view your project or file in an easy way

tab
drag and drop

* Perspective 
	Few of the perspectives in Eclipse
	* Java
	* Debug
	* Git
	
* window
* Market place 
* file search 
* show view

For shortcuts - Ctrl+Shift+L

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Maven

GroupID
Artifact ID 
verision

Facebook jar
Meta 
facebook
version 1.1.100

Insta jar
Meta
Insta
version 10.1.10

* Dependency Management tool
* we dont need to download any jar files(dependency).
* Group ID, Artifact ID and Version
* If we create a project with mavan as a dependency management tool, we get a proper project structure.
* Important file in maven project is pom.xml. In this file, we add dependency details 
* Dependencies will be stored in .m2 folder

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Git (one of the SCM - source code management tools)

We can store our project code in a proper structure. 
It will help us to reduce time and many people can work on a project at a same time 

1. Create a project in local (our system)
2. Create git account
3. Create a repo in your git account (remote)
4. We view our local project in system through Eclipse
5. We need to connect our Eclipse with Git repo

upload project in Git

Steps to upload project in Git hub

1) Create a remote repository
2) In your system open git bash from your project location
3) enter below commands
	git init
	git add .
	git commit -m "any message you can type here"
	git remote add origin SSHURL
	git push origin master
	
	
	To view status:  git status 
	to clear lines: clear

*******************************************************************************************

DAY 5(05/05/2023)

Java keywords
new, class, interface, abstract, access modifiers, data types, static, this, super, throw, throws, try, 
catch, final, finally, data type, if, for, while, break, continue, switch, case;

* dont create variables and method names using java predefined keywords 
* Java is case sensitive language (Sathya, sathya)

Naming conversion in java
* Should not use above things
* homepage - homePage (Camel case)

If you are creating package, package name
* should start with small letter followed by camel case

if you are creating class or interface
* should start with Captial letter followed by camel case

thisIsPackageName 
ThisIsClassName
ThisIsInterfaceName

thisIsMethodName
thisIsObjectName or ThisIsObjectName
thisIsVariableName

package, method, object, variable - starts with small letter
Class, Interface, Object - starts with Capital letter



Syntax

class 

accessModifer class className {

}


e.g: public class GovtHospital {

}


method 

accessModifer static/Non-static returnType methodName() {

}

static/Non-static accessModifer returnType methodName() {

}

public void thisIsNonStaticMethod() {

}

private static void thisIsStaticMethod() {

}

Methods in Java

1) main method (static method)
2) static method
3) non static method

Calling one method from another method

* How calling a method differentiate within a class or outside class

With in a class
1. calling static method/variable from non-static method - direct call
2. calling static method/variable from static method - direct call
3. calling non-static method/variable from non-static method - direct call or object creation
4. calling non-static method/variable from static method - Object creation 


Outside class
	1. calling static method/variable from non static method - using className
	2. calling static method/variable from static method - using className
	3. calling non-static method/variable from non-static method - Creating Object
	4. calling non-static method/variable from static method - Creating Object 

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Object creation - to call non-static methods

Within class we can have both static and non-static member. 

1) We create object only for class.
2) In order to access non static members of a class, we create object and access the methods and variables

Objection definition - Whenever we create an Object for a class, whatever non-static members(methods and variables) present in that class 
				will be copied and stored in heap memory. We call non-static members through Object creation only.
				
What is heap memory? 

Memory Management

Heap memory
Stack memory
SCP (String Constant Pool - A part of heap memory)

ClassA obj1 = new ClassA();

ClassA - Class Name
Obj1 - Object variable
new = key word to create obj
ClassA() - Constructor or Object creation or instance creation

* Whenever we create an object for a class, whatever non-static variables and methods present in that class will be copied to heap memory
* Object variable or instance variable, is stored in stack memory 
* We can create multiple object for a single class

public class ClassA {

int a = 10; 

public void method1() {
	ClassA obj1 = new ClassA();
	sysout(obj1.a);
	
	ClassA obj3 = new ClassA();
	ClassA obj4 = new ClassA();
}

public void method2() {
	ClassA obj2 = new ClassA();
	sysout(obj1.a);
}

}

	stack memory			Heap memory
	obj1.				a = 10; method1(), method2();
	obj2				a = 10; method1(), method2();
	obj3				a = 10; method1(), method2(); 
	
	* In heap memory, only one copy of every class is available if you create multiple object 
		for that class. So that we can save the memory space in heap memory.
	
	
public class ClassA {
int a = 10;
}

int a = 10; //class level non static
* a = 10 - When it comes to variable,  the variable and its value, 
				both will be stored in specific stack memory 

SCP:- String constant pool
There are two ways to create String in Java
1. String Literals
2. Object creation

String Literals
	String Sathya = "1000"; 
	
Sathya - Stack
1000 - SCP of Heap memory 
	
Object creation for String
	ClassA obj1 = new ClassA(); //its simple object creation
	String Sathya = new String("1000"); //parameterized object creation

Sathya - Stack memeory
1000 and methods/variables in String class - Heap memory 

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

String immutable:-

String str = "Sathya";
String str1 = "Sathya";
String str2 = "Ranjith";

In Memory it looks like
stack 		SCP
str			Sathya 
str1 		
str2 		Ranjith

str1 = str1 + str2;
str1 = SathyaRanjith

After manipulation what we think
stack 		SCP
str			SathyaRanjith
str1 		
str2 		Ranjith

But what really happens in SCP memory.
Whenever we manipulate String variable, String value never get changed. 
Simply a new value is assigned to the manipulated String variable.

stack 		SCP
str			Sathya
str1 		SathyaRanjith
str2 		Ranjith

str = str1 + str2;

In SCP, after manipulation

stack 		SCP
str			SathyaRanjithRanjith ("Sathya" - will be in SCP but no one is looking for him)
str1 		SathyaRanjith
str2 		Ranjith

Unused Object "Sathya" in the memory will be cleared after sometime by Java Garbage collection process

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Data types as variables:-
Variables in Java

Based on where we create our data types or variable names, we categories variables in 3 types 

1. Local variable
2. Class level or instance variable or non-static variable
3. static variable

****************************************************************************************

Methods in Java
1) method without return type //public void 
2) method with return type //public int
3) static method // public static
4) non static method // public void/int
5) parameterized method // public static/non-static void/any methodName(datatype variableName)
6) Non parameterized method public static/non-static void/any methodName()

METHODS CAN BE:
135 // public static void methodName(datatype variableName)
136 // public static void methodName()
145 // public non-static void methodName(datatype variableName)
146 // public non-static void methodName()
235 // public static RETURNTYPE methodName(datatype variableName)
236 // public static RETURNTYPE methodName()
245 // public non-static RETURNTYPE methodName(datatype variableName)
246 // public non-static RETURNTYPE methodName()

*********************************************************************

DAY 6(05/09/2023)

Git, Eclipse, Maven Basics

****************************************************************

DAY 7(05/13/2023)

Java basics repeat

********************************************************************

DAY 8(05/14/2023)

Java basic repeat

******************************************************************

DAY 8(07/19/2023)

Return type in detail

*******************************************************************

DAY 8(07/29/2023)

Basic of Constructor

Interface in Java

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Interface example with WebDriver 

1) Interface as return type

alert().dismiss();

alert().accept();

switchTo().frame(0).get("str");

switchTo().frame(0).switchTo().frame(10);

public class CA implements WebDriver {

public String met1() {

}

CA obj = new CA();
String str2 = obj.met1();

TargetLocator TL  = obj.switchTo();
WebDriver WD = TL.frame(0);

obj.switchTo().frame(0);

driver.findElement(By.id(""));

driver.manage().window().maximize();

Options opt = driver.manage();
Window win = opt.window();
win.maximize();

driver.manage().window().maximize();

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

2) Interface as a parameter 

WebDriver frame(WebElement frameElement);

3) Class as a return type 

String getCurrentUrl();
Dimension getSize();

4) Class as a parameter

void to(URL url);
void get(String url);

5) Example for interface following interface

public interface WebDriver extends SearchContext

6) Example for Class following an interface 

public class RemoteWebDriver
    implements WebDriver,
        JavascriptExecutor,
        HasCapabilities,
        HasVirtualAuthenticator,
        Interactive,
        PrintsPage,
        TakesScreenshot 

*****************************************************************************

DAY 9(07/30/2023)

Abstract class in detail


What is the different between interface and abstract 

interface
	* methods (also tell about static and default) 
	* variables
	* inheritance
	* unimplemented methods of interface
	* Object creation
	* how to use static and non static methods
	
abstract class
	* methods (also tell about static and default) 
	* variables
	* inheritance
	* unimplemented methods of interface
	* Object creation 
	* how to use static and non static methods

*&&&&&&&&&&&&

Whenever you study a new concept, in that concept include previously studied concepts

If you are studying abstract class, then in that concept, you need check how the below things works
Variables
methods (static or non static / parameterized or not / with or without return type)
Access modifier
Object 
Interface


&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

OOPs concept

Object Oriented Program means everything in the program is considered as Object

Java is OOP language but not 100% OOPs language. Primitive date type (int, float, etc.), they are not object. 

Root class of Java is Object. Means, if you create any class, Object class is always extended. But it is implicitly used.

public class ClassA {

} 

this is nothing but 

public class ClassA extends Object {

}

OOPs Concepts in Java

1. Encapsulation
2. Abstraction
3. Inheritance
4. Polymorphism

*****************************************************************************
DAY 10(07/31/2023)

Inheritance concept in detail

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

What is Method signature

Method syntax: 
accessModifier static/non-static returnType methodName(with or without Parameter) {

}

methodName(with or without Parameter) - method signature 

##########################

OOPs - Polymorphism

One thing available in different format.

* depends on 
	1) inheritance
	2) object creation
	3) method signature (method name and parameters(with or without))


Two polymorphism - Overloading, overriding 

OverLoading 
* It happens within a class 
* Method name should be same and parameters should vary

**********************************************************************************

Overriding
* It happens between two classes (Parent and child class) - Inheritance concept
* Method name should be same and parameter also should be same

********************************************************************************

Day 11 (04/08/2023) 

Constructor Basics 

* Short cuts for selecting word, sentence
* Navigating through a sentence

*************************************************************************

Day 12 (05/08/2023) 

Constructor use 

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Keywords in Java

access modifiers
data types
class, interface, package, abstract
return types, return
extends, implements
new
if, for, while, do


final
static
super, super()
this, this()

static
 * always belongs to the class
 * object creation not needed
 * static members within a class - direct calling
 * static members outside a class - className.staticMemberName
 * we can overload static method
 * we can not override static method
 * In interface, we can create a methods with body but that method should be either static or default
 
 
Final
 * we have to initiate while declaring
 * Once value its initalized, we cant change the value at any point
 * we can use final with variables, methods and class
 
 Super and this keywords

super() and this() 

************************************************************************
Day 13 (06/08/2023)

Blocks in Java

static block



***********************************************************
DAY14(6/11/2023)

Errors and Exceptions 

try catch finally

Throw, Throws, Throwable


******************************************************************
DAY15{22/11/2023}

IF and For Loop

**********************************************************
DAY16{23/11/2023}

For Loop Practice

debug

******************************************************************************

DAY17 (28/11/2023)

Switch condition

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Getters and Setters

public class ClassA {

private int a;
private int b;

method1() {
I am using 'a' for cal
}

}


public class ClassB {

method2() {
here I am driving a value and I want that value to be 'a' in classA

}

method3() {
here I need 'b' for my calculation
}

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

public class ClassA {

private int a = 10;
private int b = 20;


public int getB() {

return b;
}

public void setA(int val) {
	a = val;
}



method1() {

I am using 'a' for cal but I need to get 
}

}


public class ClassB {

method2() {
here I am driving a value and I want that value to be 'a' in classA
'a' value should be 100;

ClassA obj = new ClassA();
obj.setA(100};
}

method3() {
ClassA obj = new ClassA();
obj.b; //error 

int valueOfB = obj.getB();
here I need 'b' for my calculation
}

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

DAY18 (2/1/2024)

Scanner

------------------------------------------------

array []

* holds same data type
* fixed length 
* index (starts with zero)
* length 

int a = 10;
int b = 20;
int c = 30; 

Syntax 

int[] ar = new int[3];
int ar[] = new int[3];
ar[0] = 10;
ar[1] = 20;
ar[2] = 30;
ar[3] = 40;

int[] ar = {10, 20, 30};
char cr[]  = {'a', 'b','c'};
String[] st = new String[2];
st[0] = "aa";
st[1] = "bb";

System.out.println(ar);
@43943989

System.out.println(ar[0]);
System.out.println(ar[1]);
System.out.println(ar[2]);

for(int i = 0; i<3; i++) {
	System.out.println(ar[i]);
}

for(int i = 0; i<ar.length(); i++) {
	System.out.println(ar[i]);
}

for(Car eachCar: HundaiCars)  {
System.out.println(eachCar);
}

Output:
i10
creta
i20

for(Mobile each: onePlusMobile) {
System.out.println(each);
}

output:
1+5T
1+7
1+11r

for(int each: ar) {
System.out.println(each);
}

output:
10
20
30

*************************************************************

DAY19 (07/02/2024)

array practice


*************************************************************

DAY20 (28/03/2024)

MultiDimentional Arrays
Jagged array

String class demo

String practice and explanation


""
"  "
"a"
"4343"
"Sathya"
"fsjkf lkdsdk ld;l";

==

check given word is present in the sentence

String immutable










